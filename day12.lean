import Mathlib

-- 第十二話「含意と全称量化子」

-- ワシ「今日から, 昨日までと少し違うタイプを解いていく.
--      具体的には, `∀`(`\for`), `∃`(`\ex`), `A → B` とかだ.」

theorem my_lemma : ∀ x y ε : ℝ, 0 < ε → ε ≤ 1 → |x| < ε → |y| < ε → |x * y| < ε :=by
  sorry

-- 学「`∀ x,y,z ∈ ℝ(0 < ε ≤ 1 ∧ |x| < ε ∧ |y| <ε ⇒ |x * y| < ε)` ってこと?」
-- ワシ「その通り. 今までと何が違う?」
-- 学「`∀` が今までなかったし, あと `A → B` を証明しろも今までなかった.」
-- ワシ「たとえば, `∀` が無くて, `A` が仮定に回ったら, 今までに近い.」
-- 学「うん, 大分解きやすくなる.」
-- ワシ「じゃあ, 外そう.」
-- 学「?」

theorem my_lemma2 : ∀ x y ε : ℝ, 0 < ε → ε ≤ 1 → |x| < ε → |y| < ε → |x * y| < ε :=by
  -- `intro`: 含意 `→` や全称 `∀` を示す.
  intro x y ε
  show 0 < ε → ε ≤ 1 → |x| < ε → |y| < ε → |x * y| < ε
  sorry

-- 学「`∀` が外れて仮定にいった!」
-- ワシ「`intro` を使ったからだ.
--      たとえば, 任意の実数 `x` で `P` が成り立つは,
--      仮定 `x : ℝ` で, `P` が成り立つと同じ意味になる. それを利用した.」
-- 学「なるほど! あれ, それなら, `P → Q` が成り立つは,
--     仮定 `P` で, `Q` が成り立つと同じ意味だから, `intro` が使える?」
-- ワシ「さす孫!」

theorem my_lemma3 : ∀ x y ε : ℝ, 0 < ε → ε ≤ 1 → |x| < ε → |y| < ε → |x * y| < ε :=by
  -- `intro`: 含意 `→` や全称 `∀` を示す.
  intro x y ε
  intro epos ele1 xlt ylt
  calc
    |x * y| = |x| * |y| := sorry
    _ ≤ |x| * ε := sorry
    _ < 1 * ε := sorry
    _ = ε := sorry

-- 学「`sorry` の部分を埋めないといけないけど, これなら当てはまる定理探して, できそう!」
-- ワシ「こんな感じで, `intro` は, `→`, `∀` に使える.
--       また, 変数 `x`, `ylt` とかはどんな名前でもいい.」

-- ワシ「`∀` は, 定義に隠れていることが多い. 以下は上界の定義.」

-- `def`: 関数などを定義する.
def FnUb (f : ℝ → ℝ) (a : ℝ) : Prop :=
  ∀ x, f x ≤ a

variable(a b : ℝ)
variable(f g : ℝ → ℝ)

example (hfa : FnUb f a) (hgb : FnUb g b) : FnUb (fun x ↦ f x + g x) (a + b) := by
  intro x
  -- `dsimp`: 定義に展開
  show (fun x ↦ f x + g x) x ≤ a + b
  dsimp
  show f x + g x ≤ a + b
  apply add_le_add
  apply hfa
  apply hgb

-- 学「`fun` は, function(写像)の略? `f x` は, `f(x)` のこと?」
-- ワシ「その通り.」
-- 学「ということは, `a` が写像 `f` の上界で, `b` が写像 `g` の上界ならば,
--     写像 `x ↦ f x + g x` は, `a + b` を上界とするという意味か. 確かにそうだね.」
-- 学「最初の `intro x` で, `FnUb` の定義の `∀ x` 部分が外れるから,
--     goalが, `(fun x ↦ f x + g x) x ≤ a + b` になるのはわかった. `dsimp` って何?」
-- ワシ「定義を展開してくれる. しなくてもいいけど, 見やすくなることが多い.」
-- 学「なるほど, `fun` を展開しているね.」

-- ワシ「`∀` は実は暗黙的に至る所に隠れている.」
-- 学「?」

variable {α : Type*} (r s t : Set α)

example : s ⊆ s := by
  intro x xs
  exact xs

-- ワシ「`Set α` は, 型 `α` に対して, `α` の元の集合をさす.
--       たとえば, `α` が `ℕ` なら, 偶数全体の集合とかが, `Set α` になる.」
-- 学「`intro x xs` は, `intro x`, `intro xs` をまとめたもの?」
-- ワシ「その通り.」
-- 学「わかった, `s ⊆ s` は, 任意の `x : α` に対して, `x ∈ S → x ∈ S` だから,
--     `x : α`, `xs : x ∈ s` が仮定に来るんだね.」
-- ワシ「さす孫!」
-- 学「(恥ずかしい)」
